{"ast":null,"code":"import actiontypes from '../actiontypes';\nconst initState = {\n  shoppingCart: [],\n  totalCartQunatity: 0,\n  totalCartMaount: 0\n};\n\nconst cartReducer = (state = initState, action) => {\n  let itemIndex;\n\n  switch (action.type) {\n    case actiontypes().cart.add:\n      try {\n        itemIndex = state.shoppingCart.findIndex(product => product._id === action.payload._id);\n        let _product = { ...action.payload,\n          quantity: 1\n        };\n        console.log(itemIndex);\n        itemIndex < 0 ? state.shoppingCart = [...state.shoppingCart, _product] : state.shoppingCart[itemIndex].quantity += 1;\n        state.totalCartMaount = getTotalAmount(state.shoppingCart);\n      } catch (err) {\n        console.log(err);\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nconst getTotalQuantity = cart => {\n  let total = 0;\n  cart.forEach(product => {\n    total += product.quantity;\n  });\n  return total;\n};\n\nconst getTotalAmount = cart => {\n  let total = 0;\n  cart.forEach(product => {\n    total += product.price * product.quantity;\n  });\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["C:/Users/sarab/Desktop/React uppgift/ReactApi/e-co/src/store/reducers/cartReducer.js"],"names":["actiontypes","initState","shoppingCart","totalCartQunatity","totalCartMaount","cartReducer","state","action","itemIndex","type","cart","add","findIndex","product","_id","payload","_product","quantity","console","log","getTotalAmount","err","getTotalQuantity","total","forEach","price"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AAEA,MAAMC,SAAS,GAAG;AACdC,EAAAA,YAAY,EAAE,EADA;AAEdC,EAAAA,iBAAiB,EAAE,CAFL;AAGdC,EAAAA,eAAe,EAAE;AAHH,CAAlB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,SAAT,EAAoBM,MAApB,KAA+B;AAChD,MAAIC,SAAJ;;AAEC,UAAOD,MAAM,CAACE,IAAd;AACE,SAAKT,WAAW,GAAGU,IAAd,CAAmBC,GAAxB;AACE,UAAI;AACAH,QAAAA,SAAS,GAAGF,KAAK,CAACJ,YAAN,CAAmBU,SAAnB,CAA6BC,OAAO,IAAIA,OAAO,CAACC,GAAR,KAAgBP,MAAM,CAACQ,OAAP,CAAeD,GAAvE,CAAZ;AACA,YAAIE,QAAQ,GAAG,EACX,GAAGT,MAAM,CAACQ,OADC;AAEXE,UAAAA,QAAQ,EAAE;AAFC,SAAf;AAIAC,QAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ;AACCA,QAAAA,SAAS,GAAG,CAAZ,GACEF,KAAK,CAACJ,YAAN,GAAqB,CAAC,GAAGI,KAAK,CAACJ,YAAV,EAAwBc,QAAxB,CADvB,GAEEV,KAAK,CAACJ,YAAN,CAAmBM,SAAnB,EAA8BS,QAA9B,IAA0C,CAF5C;AAIAX,QAAAA,KAAK,CAACF,eAAN,GAAwBgB,cAAc,CAACd,KAAK,CAACJ,YAAP,CAAtC;AAIF,OAfH,CAgBI,OAAMmB,GAAN,EAAW;AAACH,QAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AAAiB;;AACzB,aAAOf,KAAP;;AAER;AACA,aAAOA,KAAP;AAtBJ;AAwBH,CA3BD;;AA6BA,MAAMgB,gBAAgB,GAAGZ,IAAI,IAAI;AACzB,MAAIa,KAAK,GAAG,CAAZ;AAEAb,EAAAA,IAAI,CAACc,OAAL,CAAaX,OAAO,IAAI;AACpBU,IAAAA,KAAK,IAAIV,OAAO,CAACI,QAAjB;AACH,GAFD;AAGA,SAAOM,KAAP;AACP,CAPD;;AASA,MAAMH,cAAc,GAAGV,IAAI,IAAI;AAC3B,MAAIa,KAAK,GAAE,CAAX;AAEAb,EAAAA,IAAI,CAACc,OAAL,CAAaX,OAAO,IAAI;AACpBU,IAAAA,KAAK,IAAIV,OAAO,CAACY,KAAR,GAAgBZ,OAAO,CAACI,QAAjC;AAEH,GAHD;AAIH,CAPD;;AAQA,eAAeZ,WAAf","sourcesContent":["import actiontypes from '../actiontypes';\r\n\r\nconst initState = {\r\n    shoppingCart: [],\r\n    totalCartQunatity: 0,\r\n    totalCartMaount: 0\r\n}\r\n\r\nconst cartReducer = (state = initState, action) => {\r\n   let itemIndex;\r\n   \r\n    switch(action.type) {\r\n      case actiontypes().cart.add:\r\n        try {\r\n            itemIndex = state.shoppingCart.findIndex(product => product._id === action.payload._id)\r\n            let _product = {\r\n                ...action.payload,\r\n                quantity: 1\r\n            }\r\n            console.log(itemIndex);\r\n             itemIndex < 0\r\n             ? state.shoppingCart = [...state.shoppingCart, _product]\r\n             : state.shoppingCart[itemIndex].quantity += 1\r\n\r\n             state.totalCartMaount = getTotalAmount(state.shoppingCart);\r\n             \r\n           \r\n           \r\n          }\r\n            catch(err) {console.log(err)}\r\n                return state\r\n     \r\n        default: \r\n        return state\r\n    }\r\n}   \r\n   \r\nconst getTotalQuantity = cart => {\r\n        let total = 0;\r\n\r\n        cart.forEach(product => {\r\n            total += product.quantity\r\n        })\r\n        return total;\r\n}\r\n\r\nconst getTotalAmount = cart => {\r\n    let total =0;\r\n\r\n    cart.forEach(product => {\r\n        total += product.price * product.quantity\r\n\r\n    })\r\n}\r\nexport default cartReducer;"]},"metadata":{},"sourceType":"module"}